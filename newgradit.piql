ENTITY BookLine
{
	int book_line_id,
	string line,
	int source,
	int linenum,
	int created_at,
	int updated_at
	PRIMARY(linenum, source)
}

ENTITY BookLine
{
	int book_line_id,
	string line,
	int source,
	int linenum,
	int created_at,
	int updated_at
	PRIMARY(linenum, source)
}

ENTITY Book
{
	int book_id,
	string name,
	int created_at,
	int updated_at
	PRIMARY(name)
}

ENTITY Wordlist
{
	int wordlist_id,
	string name,
	string description,
	int created_at,
	int updated_at
	PRIMARY(name)
}

ENTITY Word
{
	int word_id,
	string word,
	string definition,
	int created_at,
	int updated_at
	PRIMARY(word)
}

ENTITY WordsWordlist
{
	int word_wordlist_id,
	FOREIGN KEY word_word REF Word MAX 100,
	FOREIGN KEY wordlist_name REF Wordlist
	PRIMARY(word_wordlist_id)
}

ENTITY WrongChoice
{
	int wrong_choice_id,
	int count,
	int created_at,
	int updated_at,
	FOREIGN KEY word_word REF Word
	PRIMARY(wrong_choice_id)
}

ENTITY ContextCache
{
	int context_cache_id,
	FOREIGN KEY word_word REF Word,
	bool dirty,
	int created_at,
	int updated_at
	PRIMARY(context_cache_id)
}

ENTITY Context
{
	int context_id,
	string wordline,
	string before,
	string after,
	int created_at,
	int updated_at,
	FOREIGN KEY book_name REF Book,
	FOREIGN KEY word_word REF Word
	PRIMARY(context_id)
}

ENTITY ContextsWord
{
	int contexts_word_id,
	FOREIGN KEY context REF Context,
	FOREIGN KEY word_word REF Word
	PRIMARY(contexts_word_id)
}

ENTITY GamePlayer
{
	int game_player_id,
	FOREIGN KEY user_login REF User MAX 100,
	FOREIGN KEY game REF Game,
	int score,
	int created_at,
	int updated_at
	PRIMARY(game_player_id)
}

ENTITY MultipleChoice
{
	int multiple_choice_id,
	string choice1,
	string choice2,
	string choice3,
	string choice4,
	FOREIGN KEY word_word REF Word,
	int created_at,
	int updated_at,
	bool is_intersection,
	int score
	PRIMARY(multiple_choice_id)
}

ENTITY User
{
	int user_id,
	string login,
	string name,
	string email,
	string crypted_password,
	string salt,
	int created_at,
	int updated_at,
	string remember_token,
	int remember_token_expires_at,
	string activation_code,
	int activated_at
	PRIMARY(login)
}

ENTITY Game
{
	int game_id,
	FOREIGN KEY wordlist_name REF Wordlist,
	bool finished,
	FOREIGN KEY user_login REF User, 
	int created_at,
	int updated_at,
	string currentword
	PRIMARY(game_id)
}

////****Explicit Find Calls****
////???BookLine.find(:all, :conditions => ["line like ?", "%" + query + "%"])

////BookLine.find(:first, :conditions => ["linenum = ? and source = ?", line.linenum - 1, line.source])
	QUERY bookLineBeforeAndAfter
	FETCH BookLine
	WHERE linenum = [1:linenum] AND source = [2:linesource]
	LIMIT 1 MAX 1
////Book.find(line.source)
	QUERY bookByName
	FETCH Book
	WHERE name = [1:bookname]
	LIMIT 1 MAX 1
////GamePlayer.find(:first, :conditions => {:game_id => game.id, :user_id => user_id})
	QUERY gamePlayerByGame
	FETCH GamePlayer
	WHERE game = [1:game_id] AND user_login = [2:login]
	LIMIT 1 MAX 1
////Game.find(params[:id])
	QUERY gameById
	FETCH Game
	WHERE game_id = [1:game_id]
	LIMIT 1 MAX 1
////MultipleChoice.find(params[:mc_id])
	QUERY multipleChoiceById
	FETCH MultipleChoice
	WHERE multiple_choice_id = [1:mc_id]
	LIMIT 1 MAX 1
////User.find_by_login("guest")
	QUERY userByLogin
	FETCH User
	WHERE login = [1:username]
	LIMIT 1 MAX 1
////Wordlist.all
	QUERY allWordlist
	FETCH Wordlist
	LIMIT 500 MAX 500
////Wordlist.find(params[:id])
	QUERY wordlistByName
	FETCH Wordlist
	WHERE name = [1:wordlist_name]
	LIMIT 1 MAX 1
////Word.find_by_word(game.currentword)
	QUERY wordByWord
	FETCH Word
	WHERE word = [1:word]
	LIMIT 1 MAX 1
////Word.all
	QUERY allWord
	FETCH Word
	LIMIT 1000 MAX 1000
////Word.all(:order=>'RANDOM()', :limit=>4)
////	QUERY randomWord
////	FETCH Word
////	???
//
////****Associations****
// [[ DONT NEED ]]
////wordlist = game.wordlist.Word
//	QUERY wordlistFromGame
//	FETCH Wordlist
//		OF Game BY wordlist_name
//	//WHERE Game.game_id = [1:game]
//	WHERE Game = [this]
//	LIMIT 1 MAX 1
//
// [[ THIS IS BETTER, ALLOWS YOU TO DO Wordlist.Word() ]]
	QUERY WordFromWordlist
	FETCH Word
		OF WordsWordlist BY word_word
        OF Wordlist me BY wordlist_name
	WHERE me = [this]
    LIMIT 10000 MAX 10000
//
////c.word = w;
////	???
////cc.word = w;
////	???
//
////w.Contexts
	QUERY contextsFromWord
	FETCH Context
        OF Word me BY word_word
	WHERE me = [this]
	LIMIT [1:count] MAX 100

////w.ContextCaches
// [[ IF EACH WORD HAS EXACTLY ONE ContextCaches, CONSIDER MAKING IT A FK OF WORD ]]
	QUERY contextCacheFromWord
	FETCH ContextCache
        OF Word me BY word_word
    WHERE me = [this]
	LIMIT 1 MAX 1
//	
////word.MultipleChoice
	QUERY multipleChoicesFromWord
	FETCH MultipleChoice
        OF Word me BY word_word
	WHERE me = [this]
	LIMIT [1:count] MAX 10
////
//////word.WrongChoice << WrongChoice.create(:wrong_choice_id => word.id)
//////	???
////	
//////word.WrongChoice 
	QUERY wrongChoicesFromWord
	FETCH WrongChoice
        OF Word me BY word_word
	WHERE me = [this]
	LIMIT [1:count] MAX 10
////
//////current_user.Game
//	QUERY GameByUser
//	FETCH Game
//		OF GamePlayer BY game
//        OF User me BY user_login
//    WHERE me = [this]
//	LIMIT [1:count] MAX 25